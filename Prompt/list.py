# 1. O que √© o prompt list?
# O list permite que o usu√°rio escolha uma op√ß√£o de uma lista usando as teclas de seta (‚Üë e ‚Üì).

# 2. Como usar o list?
# Aqui est√° um exemplo simples onde o usu√°rio escolhe um idioma:

# Importa a fun√ß√£o 'prompt' da biblioteca InquirerPy, que √© usada para criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define uma lista contendo um dicion√°rio com os detalhes da pergunta.
pergunta = [
    {
        # Define o tipo da pergunta como 'list', que permite ao usu√°rio escolher uma op√ß√£o de uma lista.
        "type": "list",  
        
        # Define um nome para armazenar a resposta escolhida. Esse nome ser√° usado ao recuperar a resposta.
        "name": "idioma",  
        
        # Define a mensagem que ser√° exibida para o usu√°rio antes de mostrar as op√ß√µes.
        "message": "Escolha um idioma:",  
        
        # Lista de op√ß√µes que o usu√°rio pode selecionar.
        "choices": ["Portugu√™s", "Ingl√™s", "Espanhol"],  
    }
]

# Exibe a pergunta ao usu√°rio e armazena a resposta escolhida na vari√°vel 'resposta'.
resposta = prompt(pergunta)

# Exibe no terminal qual idioma foi selecionado pelo usu√°rio.
print(f"Idioma selecionado: {resposta['idioma']}")

# 3. Adicionando um Valor Padr√£o (default)
# Podemos definir uma op√ß√£o pr√©-selecionada:

# Importa a fun√ß√£o 'prompt' da biblioteca InquirerPy, que permite criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define uma lista contendo um dicion√°rio com os detalhes da pergunta.
pergunta = [
    {
        # Define o tipo da pergunta como 'list', que exibe uma lista de op√ß√µes para o usu√°rio selecionar.
        "type": "list",  
        
        # Define um nome para armazenar a resposta escolhida. Esse nome ser√° usado para acessar a resposta depois.
        "name": "tema",  
        
        # Define a mensagem que ser√° exibida ao usu√°rio antes de mostrar as op√ß√µes dispon√≠veis.
        "message": "Escolha um tema:",  
        
        # Lista de op√ß√µes dispon√≠veis para o usu√°rio escolher.
        "choices": ["Claro", "Escuro", "Autom√°tico"],  
        
        # Define a op√ß√£o padr√£o que ser√° selecionada caso o usu√°rio apenas pressione "Enter" sem escolher outra op√ß√£o.
        "default": "Escuro",  
    }
]

# Exibe a pergunta ao usu√°rio e armazena a resposta escolhida na vari√°vel 'resposta'.
resposta = prompt(pergunta)

# Exibe no terminal qual tema foi escolhido pelo usu√°rio.
print(f"Tema escolhido: {resposta['tema']}")

# 4. Exibir Diferentes Mensagens Baseadas na Resposta
# Podemos exibir mensagens personalizadas dependendo da escolha do usu√°rio:

# Importa a fun√ß√£o 'prompt' da biblioteca InquirerPy, que permite criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define uma lista contendo um dicion√°rio com os detalhes da pergunta.
pergunta = [
    {
        # Define o tipo da pergunta como 'list', que exibe uma lista de op√ß√µes para o usu√°rio escolher.
        "type": "list",  
        
        # Define um nome para armazenar a resposta escolhida. Esse nome ser√° usado para acessar a resposta depois.
        "name": "plano",  
        
        # Define a mensagem que ser√° exibida ao usu√°rio antes de mostrar as op√ß√µes dispon√≠veis.
        "message": "Escolha seu plano de assinatura:",  
        
        # Lista de op√ß√µes de planos dispon√≠veis para o usu√°rio selecionar.
        "choices": ["B√°sico", "Premium", "Empresarial"],  
    }
]

# Exibe a pergunta ao usu√°rio e armazena a resposta escolhida na vari√°vel 'resposta'.
resposta = prompt(pergunta)

# Verifica qual plano o usu√°rio escolheu e exibe a mensagem correspondente.
if resposta["plano"] == "B√°sico":  # Se o usu√°rio escolheu o plano "B√°sico"
    print("Plano B√°sico: Acesso limitado. üìâ")  # Exibe uma mensagem indicando acesso limitado.
elif resposta["plano"] == "Premium":  # Se o usu√°rio escolheu o plano "Premium"
    print("Plano Premium: Acesso completo! üöÄ")  # Exibe uma mensagem indicando acesso completo.
else:  # Se o usu√°rio escolheu o plano "Empresarial"
    print("Plano Empresarial: Solu√ß√£o personalizada para empresas. üè¢")  # Exibe uma mensagem indicando uma solu√ß√£o personalizada.

# Dependendo da escolha, uma mensagem diferente √© exibida.
# Isso √© √∫til para mostrar detalhes sobre cada op√ß√£o antes de continuar.

# 5. Criando uma Lista de Op√ß√µes com Tuplas
# Podemos usar discion√°rio para armazenar um valor interno diferente do exibido:

# Importa a fun√ß√£o 'prompt' da biblioteca InquirerPy, que permite criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define uma lista contendo um dicion√°rio com os detalhes da pergunta.
pergunta = [
    {
        # Define o tipo da pergunta como 'list', que exibe uma lista de op√ß√µes para o usu√°rio escolher.
        "type": "list",  
        
        # Define um nome para armazenar a resposta escolhida. Esse nome ser√° usado para acessar a resposta depois.
        "name": "moeda",  
        
        # Define a mensagem que ser√° exibida ao usu√°rio antes de mostrar as op√ß√µes dispon√≠veis.
        "message": "Escolha sua moeda:",  
        
        # Lista de op√ß√µes de moedas dispon√≠veis para o usu√°rio selecionar.
        # Cada moeda tem um 'name' (o que ser√° exibido ao usu√°rio) e um 'value' (o que ser√° armazenado na resposta).
        "choices": [
            {"name": "Real Brasileiro", "value": "BRL"},  # Op√ß√£o para escolher o Real Brasileiro, armazenado como "BRL".
            {"name": "D√≥lar Americano", "value": "USD"},  # Op√ß√£o para escolher o D√≥lar Americano, armazenado como "USD".
            {"name": "Euro", "value": "EUR"},  # Op√ß√£o para escolher o Euro, armazenado como "EUR".
        ],
    }
]

# Exibe a pergunta ao usu√°rio e armazena a resposta escolhida na vari√°vel 'resposta'.
resposta = prompt(pergunta)

# Exibe no terminal a moeda escolhida pelo usu√°rio.
# O valor armazenado na resposta ser√° o c√≥digo da moeda (por exemplo, "BRL", "USD" ou "EUR").
print(f"Moeda escolhida: {resposta['moeda']}")


# 6. Criando um Menu com √çcones Personalizados
# Podemos adicionar √≠cones para cada op√ß√£o:

# Importa a fun√ß√£o 'prompt' da biblioteca InquirerPy, que permite criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define uma lista contendo um dicion√°rio com os detalhes da pergunta.
pergunta = [
    {
        # Define o tipo da pergunta como 'list', que exibe uma lista de op√ß√µes para o usu√°rio escolher.
        "type": "list",  
        
        # Define um nome para armazenar a resposta escolhida. Esse nome ser√° usado para acessar a resposta depois.
        "name": "rede_social",  
        
        # Define a mensagem que ser√° exibida ao usu√°rio antes de mostrar as op√ß√µes dispon√≠veis.
        "message": "Escolha uma rede social:",  
        
        # Lista de op√ß√µes de redes sociais dispon√≠veis para o usu√°rio selecionar.
        # Cada op√ß√£o tem um 'name' (o que ser√° exibido ao usu√°rio) e um 'value' (o que ser√° armazenado na resposta).
        "choices": [
            {"name": "üìò Facebook", "value": "facebook"},  # Op√ß√£o para Facebook, armazenada como "facebook".
            {"name": "üì∏ Instagram", "value": "instagram"},  # Op√ß√£o para Instagram, armazenada como "instagram".
            {"name": "üê¶ Twitter", "value": "twitter"},  # Op√ß√£o para Twitter, armazenada como "twitter".
            {"name": "üé• YouTube", "value": "youtube"},  # Op√ß√£o para YouTube, armazenada como "youtube".
        ],
    }
]

# Exibe a pergunta ao usu√°rio e armazena a resposta escolhida na vari√°vel 'resposta'.
resposta = prompt(pergunta)

# Exibe no terminal a rede social escolhida pelo usu√°rio.
# O valor armazenado na resposta ser√° o identificador da rede social escolhida (por exemplo, "facebook", "instagram").
print(f"Rede social escolhida: {resposta['rede_social']}")


# 7. Criando uma Lista com Op√ß√£o "Cancelar"
# Podemos adicionar uma op√ß√£o especial para permitir que o usu√°rio saia do menu sem escolher nada.

# Importa a fun√ß√£o 'prompt' da biblioteca InquirerPy, que permite criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define uma lista contendo um dicion√°rio com os detalhes da pergunta.
pergunta = [
    {
        # Define o tipo da pergunta como 'list', que exibe uma lista de op√ß√µes para o usu√°rio escolher.
        "type": "list",  
        
        # Define um nome para armazenar a resposta escolhida. Esse nome ser√° usado para acessar a resposta depois.
        "name": "acao",  
        
        # Define a mensagem que ser√° exibida ao usu√°rio antes de mostrar as op√ß√µes dispon√≠veis.
        "message": "O que deseja fazer?",  
        
        # Lista de op√ß√µes dispon√≠veis para o usu√°rio escolher.
        "choices": ["Iniciar", "Configura√ß√µes", "Sair"],  
    }
]

# Exibe a pergunta ao usu√°rio e armazena a resposta escolhida na vari√°vel 'resposta'.
resposta = prompt(pergunta)

# Verifica se a op√ß√£o escolhida pelo usu√°rio foi "Sair".
if resposta["acao"] == "Sair":
    # Se o usu√°rio escolheu "Sair", exibe uma mensagem de despedida.
    print("Saindo... üëã")
else:
    # Se o usu√°rio escolheu qualquer outra op√ß√£o, exibe a op√ß√£o escolhida.
    print(f"Voc√™ escolheu: {resposta['acao']}")

# 8. Exemplo Completo: Menu de Configura√ß√µes
# A ideia √© criar um sistema de configura√ß√µes que permita ao usu√°rio escolher entre v√°rias op√ß√µes e executar a√ß√µes espec√≠ficas 
# para cada uma delas. Al√©m disso, vamos adicionar:

# Valida√ß√£o de entrada: Garantir que o usu√°rio escolha uma op√ß√£o v√°lida.

# A√ß√µes personalizadas: Adicionar funcionalidades reais para cada configura√ß√£o.

# Loop de repeti√ß√£o: Permitir que o usu√°rio fa√ßa v√°rias configura√ß√µes sem sair do programa.

# Mensagens amig√°veis: Usar emojis e mensagens claras para melhorar a experi√™ncia do usu√°rio.


# Importa a fun√ß√£o 'prompt' da biblioteca 'InquirerPy', que √© usada para criar perguntas interativas no terminal.
from InquirerPy import prompt

# Fun√ß√£o para alterar a resolu√ß√£o.
def alterar_resolucao():
    # Exibe as op√ß√µes de resolu√ß√£o dispon√≠veis.
    print("\nOp√ß√µes de resolu√ß√£o dispon√≠veis:")
    print("1. 1920x1080 (Full HD)")
    print("2. 1280x720 (HD)")
    print("3. 800x600 (SVGA)")
    # Pede ao usu√°rio para escolher uma resolu√ß√£o.
    escolha = input("Escolha uma resolu√ß√£o (1, 2 ou 3): ")
    # Verifica a escolha do usu√°rio e exibe a mensagem correspondente.
    if escolha == "1":
        print("Resolu√ß√£o alterada para 1920x1080 (Full HD). üñ•Ô∏è")
    elif escolha == "2":
        print("Resolu√ß√£o alterada para 1280x720 (HD). üñ•Ô∏è")
    elif escolha == "3":
        print("Resolu√ß√£o alterada para 800x600 (SVGA). üñ•Ô∏è")
    else:
        # Se a escolha for inv√°lida, exibe uma mensagem de erro.
        print("Op√ß√£o inv√°lida. Nenhuma altera√ß√£o foi feita. ‚ùå")

# Fun√ß√£o para alterar o tema.
def alterar_tema():
    # Exibe as op√ß√µes de tema dispon√≠veis.
    print("\nTemas dispon√≠veis:")
    print("1. Claro ‚òÄÔ∏è")
    print("2. Escuro üåô")
    # Pede ao usu√°rio para escolher um tema.
    escolha = input("Escolha um tema (1 ou 2): ")
    # Verifica a escolha do usu√°rio e exibe a mensagem correspondente.
    if escolha == "1":
        print("Tema alterado para Claro. ‚òÄÔ∏è")
    elif escolha == "2":
        print("Tema alterado para Escuro. üåô")
    else:
        # Se a escolha for inv√°lida, exibe uma mensagem de erro.
        print("Op√ß√£o inv√°lida. Nenhuma altera√ß√£o foi feita. ‚ùå")

# Fun√ß√£o para ajustar o volume.
def ajustar_volume():
    # Pede ao usu√°rio para digitar o n√≠vel de volume.
    volume = input("\nDigite o n√≠vel de volume (0 a 100): ")
    # Verifica se o valor digitado √© um n√∫mero entre 0 e 100.
    if volume.isdigit() and 0 <= int(volume) <= 100:
        # Se for v√°lido, exibe o volume ajustado.
        print(f"Volume ajustado para {volume}%. üîä")
    else:
        # Se for inv√°lido, exibe uma mensagem de erro.
        print("Valor inv√°lido. O volume deve estar entre 0 e 100. ‚ùå")

# Fun√ß√£o principal do programa.
def sistema_configuracoes():
    # Loop infinito para permitir que o usu√°rio fa√ßa v√°rias configura√ß√µes.
    while True:
        # Pergunta ao usu√°rio qual configura√ß√£o deseja alterar.
        pergunta = [
            {
                "type": "list",  # Tipo de pergunta: lista de op√ß√µes.
                "name": "config",  # Nome da resposta (ser√° armazenada em resposta['config']).
                "message": "Escolha uma configura√ß√£o:",  # Mensagem exibida ao usu√°rio.
                "choices": [  # Op√ß√µes dispon√≠veis.
                    {"name": "üñ•Ô∏è  Alterar resolu√ß√£o", "value": "resolucao"},  # Op√ß√£o 1.
                    {"name": "üé® Alterar tema", "value": "tema"},  # Op√ß√£o 2.
                    {"name": "üîä Ajustar volume", "value": "volume"},  # Op√ß√£o 3.
                    {"name": "‚ùå Sair", "value": "sair"},  # Op√ß√£o 4.
                ],
            }
        ]
        # Faz a pergunta ao usu√°rio e armazena a resposta.
        resposta = prompt(pergunta)

        # Executa a a√ß√£o correspondente √† escolha do usu√°rio.
        if resposta["config"] == "resolucao":
            # Se o usu√°rio escolher "Alterar resolu√ß√£o", chama a fun√ß√£o correspondente.
            alterar_resolucao()
        elif resposta["config"] == "tema":
            # Se o usu√°rio escolher "Alterar tema", chama a fun√ß√£o correspondente.
            alterar_tema()
        elif resposta["config"] == "volume":
            # Se o usu√°rio escolher "Ajustar volume", chama a fun√ß√£o correspondente.
            ajustar_volume()
        else:
            # Se o usu√°rio escolher "Sair", exibe uma mensagem e encerra o loop.
            print("Saindo do sistema de configura√ß√µes. At√© mais! üëã")
            break  # Sai do loop e encerra o programa.

        # Pergunta ao usu√°rio se deseja fazer outra configura√ß√£o.
        pergunta_repetir = [
            {
                "type": "confirm",  # Tipo de pergunta: confirma√ß√£o (sim/n√£o).
                "name": "repetir",  # Nome da resposta (ser√° armazenada em resposta['repetir']).
                "message": "Deseja fazer outra configura√ß√£o?",  # Mensagem exibida ao usu√°rio.
                "default": True,  # Valor padr√£o (sim).
            }
        ]
        # Faz a pergunta ao usu√°rio e armazena a resposta.
        resposta_repetir = prompt(pergunta_repetir)
        if not resposta_repetir["repetir"]:
            # Se o usu√°rio escolher n√£o continuar, exibe uma mensagem de agradecimento e encerra o programa.
            print("Obrigado por usar o sistema de configura√ß√µes! At√© mais! üëã")
            break

# Executa o programa.
if __name__ == "__main__":
    sistema_configuracoes()
# 1. O que √© o prompt confirm?
# O prompt confirm permite que o usu√°rio responda "Sim" ou "N√£o" de maneira intuitiva.
# Ele √© √∫til para:
# ‚úÖ Pedir confirma√ß√µes antes de executar uma a√ß√£o.
# ‚úÖ Criar menus de op√ß√µes "Sim" ou "N√£o".
# ‚úÖ Evitar que o usu√°rio tome uma decis√£o acidentalmente.

# 2. Como usar o confirm prompt?
# Aqui est√° um exemplo b√°sico onde o usu√°rio precisa confirmar uma a√ß√£o:

# Importa a biblioteca InquirerPy, que permite criar perguntas interativas no terminal
from InquirerPy import prompt

# Define uma pergunta para o usu√°rio
pergunta = [
    {
        "type": "confirm",  # O tipo "confirm" cria uma pergunta de "Sim" ou "N√£o"
        "name": "continuar",  # Nome da vari√°vel que armazenar√° a resposta
        "message": "Deseja continuar?",  # Texto exibido para o usu√°rio
    }
]

# Exibe a pergunta no terminal e armazena a resposta do usu√°rio
resposta = prompt(pergunta)

# Exibe no terminal a resposta do usu√°rio (True para "Sim" e False para "N√£o")
print(f"Resposta: {resposta['continuar']}")


# Como funciona?

# O prompt exibe "[Y/n]",.
# O valor retornado ser√° True para "Sim" e False para "N√£o".

# 3. Definir um Valor Padr√£o (default)
# Podemos definir um valor padr√£o usando "default":

# Importa a biblioteca InquirerPy, que permite criar perguntas interativas no terminal
from InquirerPy import prompt

# Define uma pergunta para o usu√°rio
pergunta = [
    {
        "type": "confirm",  # O tipo "confirm" cria uma pergunta de "Sim" ou "N√£o"
        "name": "deletar",  # Nome da vari√°vel que armazenar√° a resposta
        "message": "Tem certeza de que deseja excluir o arquivo?",  # Pergunta exibida ao usu√°rio
        "default": False,  # Define a resposta padr√£o como "N√£o" (False)
    }
]

# Exibe a pergunta no terminal e armazena a resposta do usu√°rio
resposta = prompt(pergunta)

# Exibe no terminal a resposta do usu√°rio (True para "Sim" e False para "N√£o")
print(f"Confirma√ß√£o: {resposta['deletar']}")

# 4. Exibir Diferentes Mensagens Baseadas na Resposta
# Podemos usar if para exibir mensagens diferentes dependendo da escolha do usu√°rio.

# Importa a biblioteca InquirerPy, que permite criar perguntas interativas no terminal
from InquirerPy import prompt

# Define uma pergunta para o usu√°rio
pergunta = [
    {
        "type": "confirm",  # O tipo "confirm" cria uma pergunta de "Sim" ou "N√£o"
        "name": "inscricao",  # Nome da vari√°vel que armazenar√° a resposta
        "message": "Deseja se inscrever no nosso curso?",  # Pergunta exibida ao usu√°rio
    }
]

# Exibe a pergunta no terminal e armazena a resposta do usu√°rio
resposta = prompt(pergunta)

# Verifica a resposta do usu√°rio
if resposta["inscricao"]:  # Se o usu√°rio respondeu "Sim" (True)
    print("√ìtimo! Voc√™ est√° inscrito! üéâ")  # Exibe mensagem de confirma√ß√£o
else:  # Se o usu√°rio respondeu "N√£o" (False)
    print("Que pena! Talvez na pr√≥xima. üò¢")  # Exibe mensagem de recusa


# 5. Aplica√ß√£o Pr√°tica: Valida√ß√£o de Exclus√£o de Conta
# Vamos simular um sistema onde o usu√°rio precisa confirmar duas vezes antes de excluir sua conta.

# Importa a biblioteca InquirerPy, que permite criar perguntas interativas no terminal
from InquirerPy import prompt

# Define uma lista de perguntas a serem feitas ao usu√°rio
perguntas = [
    {
        # O tipo "confirm" cria uma pergunta de "Sim" ou "N√£o"
        "type": "confirm",
        "name": "confirmar_1",  # Nome da vari√°vel onde ser√° armazenada a resposta
        "message": "Tem certeza de que deseja excluir sua conta?",  # Pergunta exibida ao usu√°rio
    },
    {
        # Outra pergunta de confirma√ß√£o
        "type": "confirm",  # Tipo de pergunta "confirm"
        "name": "confirmar_2",  # Nome da vari√°vel que armazenar√° a segunda resposta
        "message": "Essa a√ß√£o √© irrevers√≠vel. Tem certeza?",  # Pergunta que s√≥ aparece se a primeira for "Sim"
        # A op√ß√£o 'when' faz com que a pergunta apare√ßa apenas se a resposta anterior for 'Sim' (True)
        "when": lambda respostas: respostas["confirmar_1"],  # Checa se a primeira pergunta foi respondida com "Sim"
    }
]

# Exibe as perguntas para o usu√°rio e armazena as respostas
respostas = prompt(perguntas)

# Verifica a resposta √† segunda pergunta
if respostas.get("confirmar_2"):  # Se a segunda resposta for "Sim" (True)
    print("Conta exclu√≠da com sucesso! üö®")  # Exibe mensagem de sucesso
else:  # Se a segunda resposta for "N√£o" (False)
    print("A exclus√£o foi cancelada. üëç")  # Exibe mensagem de cancelamento


# 6. Personalizando a Apar√™ncia
# Podemos mudar a cor do prompt para destacar a pergunta:

# Importa a biblioteca InquirerPy, que permite fazer perguntas interativas ao usu√°rio no terminal
from InquirerPy import prompt

# Define um estilo personalizado para modificar as cores e o formato das mensagens no terminal
custom_style = {
    "questionmark": "fg:#4B0082 bold",  # Modifica o ponto de interroga√ß√£o "?" para cor roxa escura e estilo negrito
    "question": "fg:#191970 bold",  # Modifica a pergunta exibida para cor azul escura e estilo negrito
    "answer": "fg:#FF1493 bold",  # Modifica a resposta do usu√°rio para cor rosa choque e estilo negrito
}

# Define a pergunta a ser feita ao usu√°rio
pergunta = [
    {
        "type": "confirm",  # Tipo de pergunta: confirma√ß√£o (Sim ou N√£o)
        "name": "salvar",  # Nome da vari√°vel onde ser√° armazenada a resposta (resposta['salvar'])
        "message": "Deseja salvar as configura√ß√µes?",  # Mensagem exibida ao usu√°rio
    }
]

# Exibe a pergunta no terminal e armazena a resposta do usu√°rio na vari√°vel 'resposta'
# O estilo personalizado ser√° aplicado √†s mensagens exibidas
resposta = prompt(pergunta, style=custom_style)

# Exibe no terminal a resposta do usu√°rio (se ele escolheu salvar ou n√£o)
print(f"Configura√ß√£o salva? {resposta['salvar']}")

# 7. Exemplo Completo: Sistema de Login
# Vamos criar um projeto mais completo e interativo para simular um sistema de login. O projeto incluir√°:

# Login: O usu√°rio insere nome de usu√°rio e senha.

# Valida√ß√£o: Verifica se o nome de usu√°rio e a senha est√£o corretos.

# Op√ß√£o de permanecer logado: Pergunta ao usu√°rio se deseja permanecer logado.

# Mensagens personalizadas: Exibe mensagens amig√°veis e informativas.

# Repeti√ß√£o: Permite que o usu√°rio tente fazer login novamente em caso de erro.

# Importa a fun√ß√£o 'prompt' da biblioteca 'InquirerPy', que √© usada para criar perguntas interativas no terminal.
from InquirerPy import prompt

# Dados de usu√°rios v√°lidos (simulando um banco de dados).
usuarios = {
    "admin": "senha123",  # Nome de usu√°rio: admin, Senha: senha123
    "usuario": "123456",  # Nome de usu√°rio: usuario, Senha: 123456
}

# Fun√ß√£o para validar o login.
def validar_login(usuario, senha):
    # Verifica se o usu√°rio existe no dicion√°rio 'usuarios' e se a senha est√° correta.
    if usuario in usuarios and usuarios[usuario] == senha:
        # Se o usu√°rio e a senha estiverem corretos, retorna True.
        return True
    # Caso contr√°rio, retorna False.
    return False

# Fun√ß√£o principal do programa.
def sistema_login():
    # Loop infinito para permitir que o usu√°rio tente fazer login v√°rias vezes.
    while True:
        # Pergunta ao usu√°rio o nome de usu√°rio e a senha.
        perguntas_login = [
            {
                "type": "input",  # Tipo de pergunta: entrada de texto.
                "name": "usuario",  # Nome da resposta (ser√° armazenada em resposta['usuario']).
                "message": "Digite seu nome de usu√°rio:",  # Mensagem exibida ao usu√°rio.
            },
            {
                "type": "password",  # Tipo de pergunta: senha (o texto √© oculto).
                "name": "senha",  # Nome da resposta (ser√° armazenada em resposta['senha']).
                "message": "Digite sua senha:",  # Mensagem exibida ao usu√°rio.
            },
        ]
        # Faz as perguntas ao usu√°rio e armazena as respostas.
        resposta_login = prompt(perguntas_login)

        # Obt√©m o nome de usu√°rio e a senha digitados pelo usu√°rio.
        usuario = resposta_login["usuario"]
        senha = resposta_login["senha"]

        # Valida o login usando a fun√ß√£o 'validar_login'.
        if validar_login(usuario, senha):
            # Se o login for bem-sucedido, exibe uma mensagem de boas-vindas.
            print(f"\nBem-vindo, {usuario}! üéâ\n")
            # Pergunta ao usu√°rio se deseja permanecer logado.
            pergunta_manter_logado = [
                {
                    "type": "confirm",  # Tipo de pergunta: confirma√ß√£o (sim/n√£o).
                    "name": "manter_logado",  # Nome da resposta (ser√° armazenada em resposta['manter_logado']).
                    "message": "Deseja permanecer logado?",  # Mensagem exibida ao usu√°rio.
                    "default": True,  # Valor padr√£o (sim).
                }
            ]
            # Faz a pergunta ao usu√°rio e armazena a resposta.
            resposta_manter_logado = prompt(pergunta_manter_logado)

            if resposta_manter_logado["manter_logado"]:
                # Se o usu√°rio escolher permanecer logado, exibe uma mensagem.
                print("Voc√™ permanecer√° logado. üîí")
            else:
                # Se o usu√°rio escolher n√£o permanecer logado, exibe uma mensagem.
                print("Voc√™ ser√° desconectado ao sair. üëã")
            break  # Sai do loop ap√≥s o login bem-sucedido.
        else:
            # Se o login falhar, exibe uma mensagem de erro.
            print("\nNome de usu√°rio ou senha incorretos. Tente novamente. ‚ùå\n")

        # Pergunta ao usu√°rio se deseja tentar fazer login novamente.
        pergunta_tentar_novamente = [
            {
                "type": "confirm",  # Tipo de pergunta: confirma√ß√£o (sim/n√£o).
                "name": "tentar_novamente",  # Nome da resposta (ser√° armazenada em resposta['tentar_novamente']).
                "message": "Deseja tentar fazer login novamente?",  # Mensagem exibida ao usu√°rio.
                "default": True,  # Valor padr√£o (sim).
            }
        ]
        # Faz a pergunta ao usu√°rio e armazena a resposta.
        resposta_tentar_novamente = prompt(pergunta_tentar_novamente)
        if not resposta_tentar_novamente["tentar_novamente"]:
            # Se o usu√°rio escolher n√£o tentar novamente, exibe uma mensagem de agradecimento e encerra o programa.
            print("Obrigado por usar o sistema de login. At√© mais! üëã")
            break

# Executa o programa.
if __name__ == "__main__":
    sistema_login()
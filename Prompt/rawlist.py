from InquirerPy import prompt 

# 1. O que √© o rawlist?
# O rawlist √© um prompt que permite ao usu√°rio selecionar uma op√ß√£o digitando o n√∫mero correspondente.

# Ele √© √∫til para:
# ‚úÖ Criar menus r√°pidos sem necessidade de navega√ß√£o pelas setas.
# ‚úÖ Interfaces minimalistas onde o usu√°rio j√° sabe a op√ß√£o desejada.
# ‚úÖ Permitir sele√ß√£o mais eficiente em terminais sem suporte a interfaces interativas.

# 2. Como usar o rawlist?
# Aqui est√° um exemplo b√°sico onde o usu√°rio escolhe um sistema operacional:

# Importa a fun√ß√£o prompt da biblioteca InquirerPy, que permite criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define uma lista chamada 'pergunta', que cont√©m um dicion√°rio com os detalhes da pergunta interativa.
pergunta = [
    {
        "type": "rawlist",  # Define o tipo de pergunta como uma lista de op√ß√µes para escolher.
        "name": "sistema",  # Nome da vari√°vel que armazenar√° a resposta do usu√°rio.
        "message": "Qual sistema operacional voc√™ usa?",  # Pergunta exibida ao usu√°rio.
        "choices": ["Windows", "Linux", "MacOS"],  # Lista de op√ß√µes dispon√≠veis para escolha.
    }
]

# Exibe a pergunta no terminal e armazena a resposta escolhida pelo usu√°rio na vari√°vel 'resposta'.
resposta = prompt(pergunta)

# Exibe no terminal qual sistema operacional o usu√°rio escolheu, acessando a resposta armazenada.
print(f"Sistema escolhido: {resposta['sistema']}")


# 3. Adicionando um Valor Padr√£o (default)
# Podemos definir uma op√ß√£o pr√©-selecionada para facilitar a escolha do usu√°rio:

# Importa a fun√ß√£o prompt da biblioteca InquirerPy, que permite criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define uma lista chamada 'pergunta', que cont√©m um dicion√°rio com os detalhes da pergunta interativa.
pergunta = [
    {
        "type": "rawlist",  # Define o tipo de pergunta como uma lista de op√ß√µes para escolher.
        "name": "navegador",  # Nome da vari√°vel que armazenar√° a resposta do usu√°rio.
        "message": "Escolha seu navegador preferido:",  # Pergunta que ser√° exibida ao usu√°rio no terminal.
        "choices": ["Google Chrome", "Firefox", "Edge", "Safari"],  # Lista de navegadores dispon√≠veis para escolha.
        "default": 2,  # Define a op√ß√£o padr√£o como a terceira da lista (posi√ß√£o 2, pois a contagem come√ßa do zero).
    }
]

# Exibe a pergunta no terminal e armazena a resposta escolhida pelo usu√°rio na vari√°vel 'resposta'.
resposta = prompt(pergunta)

# Exibe no terminal qual navegador foi escolhido, acessando a resposta armazenada.
print(f"Navegador escolhido: {resposta['navegador']}")



# 4. Exemplo: Menu de Configura√ß√µes
# Vamos criar um menu onde o usu√°rio pode configurar sua experi√™ncia de uso:

# Importa a fun√ß√£o prompt da biblioteca InquirerPy, que permite criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define uma lista chamada 'pergunta', que cont√©m um dicion√°rio com os detalhes da pergunta interativa.
pergunta = [
    {
        "type": "rawlist",  # Define o tipo de pergunta como uma lista de op√ß√µes para o usu√°rio escolher.
        "name": "config",  # Nome da vari√°vel que armazenar√° a op√ß√£o selecionada pelo usu√°rio.
        "message": "O que deseja configurar?",  # Pergunta exibida ao usu√°rio no terminal.
        "choices": ["Alterar idioma", "Ajustar brilho", "Mudar senha", "Sair"],  # Op√ß√µes dispon√≠veis para escolha.
    }
]

# Exibe a pergunta no terminal e armazena a resposta escolhida pelo usu√°rio na vari√°vel 'resposta'.
resposta = prompt(pergunta)

# Verifica qual op√ß√£o o usu√°rio escolheu e executa a a√ß√£o correspondente.

if resposta["config"] == "Alterar idioma":  # Se o usu√°rio escolheu "Alterar idioma"
    print("Redirecionando para configura√ß√µes de idioma... üåç")  # Exibe a mensagem de redirecionamento.
    
elif resposta["config"] == "Ajustar brilho":  # Se o usu√°rio escolheu "Ajustar brilho"
    print("Ajustando brilho da tela... üí°")  # Exibe a mensagem indicando o ajuste de brilho.

elif resposta["config"] == "Mudar senha":  # Se o usu√°rio escolheu "Mudar senha"
    print("Redirecionando para altera√ß√£o de senha... üîë")  # Exibe a mensagem de altera√ß√£o de senha.

else:  # Se o usu√°rio escolheu "Sair" (ou qualquer outra op√ß√£o inesperada)
    print("Saindo das configura√ß√µes. ‚ùå")  # Exibe a mensagem informando que est√° saindo.


# 5. Compara√ß√£o select vs rawlist
# Caracter√≠stica	            select	                rawlist
# Navega√ß√£o	            Setas (‚Üë e ‚Üì)	        Digita√ß√£o de um n√∫mero
# Usabilidade	            Mais intuitivo	        Mais r√°pido para usu√°rios experientes
# Recomendado para	    Menus interativos	    Interfaces minimalistas
# Suporte a emoji?	    Sim (üì∑ Instagram)	    N√£o (apenas texto)

# Quando usar rawlist?
# üîπ Quando o usu√°rio j√° est√° acostumado com os n√∫meros das op√ß√µes.
# üîπ Quando queremos menus r√°pidos e sem navega√ß√£o por setas.
# üîπ Para interfaces em terminais simples (sem suporte interativo).

# Quando usar select?
# üîπ Quando o usu√°rio precisa ver todas as op√ß√µes antes de decidir.
# üîπ Para interfaces mais amig√°veis e visuais.

# 6. Exemplo Completo: Escolha de Pacotes de Software

# Importa a biblioteca 'time' para usar fun√ß√µes relacionadas ao tempo, como pausas (sleep).
import time

# Importa a fun√ß√£o 'prompt' da biblioteca 'prompt_toolkit' para criar entradas interativas.
from prompt_toolkit import prompt

# Importa a fun√ß√£o 'radiolist_dialog' para criar caixas de di√°logo com op√ß√µes de sele√ß√£o.
from prompt_toolkit.shortcuts import radiolist_dialog

# Define uma fun√ß√£o chamada 'simular_instalacao' que simula o processo de instala√ß√£o de um software.
def simular_instalacao(software):
    # Exibe uma mensagem informando que a instala√ß√£o do software selecionado est√° come√ßando.
    print(f"Iniciando instala√ß√£o do {software}... üîÑ")
    
    # Cria um loop que simula o progresso da instala√ß√£o, de 20% em 20%.
    for i in range(1, 6):
        # Pausa a execu√ß√£o do programa por 1 segundo para simular o tempo de instala√ß√£o.
        time.sleep(1)
        
        # Exibe o progresso da instala√ß√£o em porcentagem.
        print(f"Progresso: {i * 20}%")
    
    # Exibe uma mensagem informando que a instala√ß√£o foi conclu√≠da com sucesso.
    print(f"{software} instalado com sucesso! ‚úÖ")

# Define a fun√ß√£o principal do programa, chamada 'main'.
def main():
    # Cria um loop infinito para permitir que o usu√°rio fa√ßa v√°rias sele√ß√µes.
    while True:
        # Cria uma lista de op√ß√µes que ser√£o exibidas ao usu√°rio.
        # Cada op√ß√£o √© uma tupla contendo um valor interno e um texto exibido.
        opcoes = [
            ("Python", "Python"),        # Op√ß√£o para instalar Python.
            ("Node.js", "Node.js"),      # Op√ß√£o para instalar Node.js.
            ("Docker", "Docker"),        # Op√ß√£o para instalar Docker.
            ("Git", "Git"),              # Op√ß√£o para instalar Git.
            ("Cancelar", "Cancelar instala√ß√£o"),  # Op√ß√£o para cancelar a instala√ß√£o.
        ]

        # Cria uma caixa de di√°logo interativa com as op√ß√µes definidas acima.
        resposta = radiolist_dialog(
            title="Instalador de Software",  # T√≠tulo da caixa de di√°logo.
            text="Qual pacote deseja instalar?",  # Texto exibido na caixa de di√°logo.
            values=opcoes,  # Lista de op√ß√µes que o usu√°rio pode escolher.
        ).run()  # Executa a caixa de di√°logo e aguarda a resposta do usu√°rio.

        # Verifica se o usu√°rio cancelou a instala√ß√£o ou fechou a caixa de di√°logo.
        if resposta is None or resposta == "Cancelar":
            # Exibe uma mensagem informando que a instala√ß√£o foi cancelada.
            print("Instala√ß√£o cancelada. ‚ùå")
            break  # Sai do loop e encerra o programa.
        else:
            # Se o usu√°rio selecionou um software, chama a fun√ß√£o para simular a instala√ß√£o.
            simular_instalacao(resposta)

        # Cria uma nova caixa de di√°logo para perguntar se o usu√°rio deseja continuar.
        continuar = radiolist_dialog(
            title="Continuar?",  # T√≠tulo da caixa de di√°logo.
            text="Deseja instalar outro pacote?",  # Texto exibido na caixa de di√°logo.
            values=[
                ("sim", "Sim"),  # Op√ß√£o para continuar instalando.
                ("nao", "N√£o"),  # Op√ß√£o para encerrar o programa.
            ],
        ).run()  # Executa a caixa de di√°logo e aguarda a resposta do usu√°rio.

        # Verifica se o usu√°rio escolheu n√£o continuar.
        if continuar != "sim":
            # Exibe uma mensagem de agradecimento e encerra o programa.
            print("Obrigado por usar o instalador! üëã")
            break  # Sai do loop e encerra o programa.

# Verifica se o script est√° sendo executado diretamente (n√£o importado como m√≥dulo).
if __name__ == "__main__":
    # Chama a fun√ß√£o principal 'main' para iniciar o programa.
    main()
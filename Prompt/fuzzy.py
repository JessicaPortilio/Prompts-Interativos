# 1. O que √© o fuzzy?
# O fuzzy √© um tipo de prompt interativo que permite ao usu√°rio buscar op√ß√µes de maneira aproximada ao digitar, utilizando correspond√™ncia difusa (fuzzy matching).
# ‚úÖ Ideal para listas longas ou quando o usu√°rio n√£o tem certeza do nome exato da op√ß√£o.
# ‚úÖ O usu√°rio pode digitar uma parte do texto e o fuzzy tentar√° encontrar a correspond√™ncia mais pr√≥xima.

# 2. Como usar o fuzzy?
# Aqui est√° um exemplo b√°sico onde o usu√°rio escolhe um filme, mas pode digitar parte do nome para facilitar a busca:

# Importa a fun√ß√£o `prompt` da biblioteca InquirerPy, que permite criar perguntas interativas no terminal
from InquirerPy import prompt

# Define uma lista contendo um dicion√°rio com as configura√ß√µes da pergunta
pergunta = [
    {
        "type": "fuzzy",  # Define o tipo de entrada como "fuzzy", permitindo sugest√µes de auto preenchimento baseadas na digita√ß√£o do usu√°rio
        "name": "filme",  # Define o nome da resposta que ser√° armazenada no dicion√°rio de retorno
        "message": "Escolha um filme:",  # Define a mensagem exibida ao usu√°rio no terminal
        "choices": [  # Lista de op√ß√µes dispon√≠veis para o usu√°rio escolher
            "O Senhor dos An√©is",
            "Matrix",
            "Star Wars",
            "Titanic",
            "Vingadores",
            "O Jogo da Imita√ß√£o",
        ],
    }
]

# Exibe a pergunta ao usu√°rio e armazena a resposta na vari√°vel `resposta`
resposta = prompt(pergunta)

# Exibe no terminal o filme escolhido pelo usu√°rio
print(f"Filme escolhido: {resposta['filme']}")


# 3. Exemplo Completo: Busca de Cidades
# O que vamos implementar:

# Busca fuzzy mais robusta: Permitir que o usu√°rio encontre cidades mesmo com erros de digita√ß√£o ou letras faltando.

# Valida√ß√£o de entrada: Garantir que o usu√°rio selecione uma cidade v√°lida da lista.

# Feedback visual: Mostrar sugest√µes em tempo real enquanto o usu√°rio digita.

# Expans√£o da lista de cidades: Adicionar mais cidades para tornar a busca mais interessante.

# Interface mais amig√°vel: Adicionar cores ou emojis para melhorar a experi√™ncia do usu√°rio.

# Importa a fun√ß√£o 'prompt' da biblioteca 'InquirerPy', que √© usada para criar interfaces de perguntas no terminal.
# Essa fun√ß√£o permite que o programa fa√ßa perguntas interativas ao usu√°rio.
from InquirerPy import prompt

# Importa a fun√ß√£o 'process' da biblioteca 'fuzzywuzzy', que √© usada para fazer buscas aproximadas (fuzzy matching).
# A busca fuzzy permite encontrar correspond√™ncias mesmo quando o texto digitado pelo usu√°rio cont√©m erros ou est√° incompleto.
from fuzzywuzzy import process  # Para busca fuzzy mais robusta

# Lista de cidades dispon√≠veis para busca.
# Essa lista cont√©m os nomes das cidades que o programa reconhece.
CIDADES = [
    "S√£o Paulo",
    "Rio de Janeiro",
    "Belo Horizonte",
    "Curitiba",
    "Porto Alegre",
    "Salvador",
    "Fortaleza",
    "Recife",
    "Manaus",
    "Bel√©m",
    "Bras√≠lia",
    "Goi√¢nia",
    "Florian√≥polis",
    "Vit√≥ria",
    "Natal",
    "Jo√£o Pessoa",
    "Macei√≥",
    "Campo Grande",
    "Cuiab√°",
    "Teresina",
]

# Fun√ß√£o para buscar a cidade mais pr√≥xima da entrada do usu√°rio usando fuzzy matching.
def buscar_cidade(nome):
    """Busca a cidade mais pr√≥xima na lista usando fuzzy matching."""
    # Verifica se o nome n√£o est√° vazio ap√≥s o pr√©-processamento.
    # O m√©todo 'strip()' remove espa√ßos em branco no in√≠cio e no fim do texto.
    if not nome.strip():
        return None  # Retorna 'None' se o texto estiver vazio.

    # Usa fuzzy matching para encontrar a cidade mais pr√≥xima.
    # A fun√ß√£o 'process.extractOne' compara o texto digitado pelo usu√°rio com a lista de cidades
    # e retorna a cidade mais parecida (com a maior pontua√ß√£o de similaridade).
    resultado, _ = process.extractOne(nome, CIDADES)

    # Retorna a cidade encontrada.
    return resultado

# Fun√ß√£o principal do programa.
def main():
    # Cria um loop infinito para permitir que o usu√°rio tente novamente caso a cidade n√£o seja encontrada ou ele n√£o confirme a escolha.
    while True:
        # Pergunta para o usu√°rio digitar o nome de uma cidade.
        pergunta = [
            {
                "type": "input",  # Tipo de pergunta: entrada de texto.
                "name": "cidade",  # Nome da resposta (ser√° usada como chave no dicion√°rio de respostas).
                "message": "Digite o nome de uma cidade:",  # Mensagem exibida para o usu√°rio.
            }
        ]

        # Exibe a pergunta ao usu√°rio e armazena a resposta.
        # A fun√ß√£o 'prompt' exibe a pergunta e retorna um dicion√°rio com a resposta do usu√°rio.
        resposta = prompt(pergunta)

        # Remove espa√ßos em branco no in√≠cio e no fim do texto digitado pelo usu√°rio.
        cidade_digitada = resposta["cidade"].strip()

        # Busca a cidade mais pr√≥xima da entrada do usu√°rio usando a fun√ß√£o 'buscar_cidade'.
        cidade_encontrada = buscar_cidade(cidade_digitada)

        # Verifica se a cidade foi encontrada.
        if cidade_encontrada:
            # Pergunta para confirmar se a cidade encontrada √© a que o usu√°rio queria.
            pergunta_confirmacao = [
                {
                    "type": "confirm",  # Tipo de pergunta: confirma√ß√£o (sim/n√£o).
                    "name": "confirmar",  # Nome da resposta (ser√° usada como chave no dicion√°rio de respostas).
                    "message": f"Voc√™ quis dizer {cidade_encontrada}?",  # Mensagem exibida para o usu√°rio, mostrando a cidade encontrada.
                    "default": True,  # Valor padr√£o da confirma√ß√£o (sim/n√£o). Aqui, "sim" √© o padr√£o.
                }
            ]

            # Exibe a pergunta de confirma√ß√£o ao usu√°rio e armazena a resposta.
            confirmacao = prompt(pergunta_confirmacao)

            # Verifica se o usu√°rio confirmou a cidade encontrada.
            if confirmacao["confirmar"]:
                # Se confirmou, exibe a cidade escolhida e encerra o loop.
                print(f"\nCidade escolhida: {cidade_encontrada} üåÜ")
                break
            else:
                # Se n√£o confirmou, exibe uma mensagem e volta ao in√≠cio do loop para tentar novamente.
                print("Tente novamente!\n")
        else:
            # Se a cidade n√£o foi encontrada, exibe uma mensagem e volta ao in√≠cio do loop para tentar novamente.
            print("Cidade n√£o encontrada. Tente novamente!\n")

# Verifica se o script est√° sendo executado diretamente (n√£o importado como m√≥dulo).
if __name__ == "__main__":
    # Chama a fun√ß√£o principal para iniciar o programa.
    main()
# 1. O que √© o checkbox?
# O checkbox permite que o usu√°rio selecione m√∫ltiplas op√ß√µes de uma lista.
# ‚úÖ O usu√°rio pode marcar/desmarcar op√ß√µes usando a barra de espa√ßo.
# ‚úÖ Ideal para selecionar m√∫ltiplos itens antes de confirmar.
# ‚úÖ O resultado final ser√° uma lista de valores selecionados.

# üìå Quando usar?

# Escolha de prefer√™ncias (ex: g√™neros musicais, categorias de produtos).
# Sele√ß√£o de m√∫ltiplos arquivos para uma a√ß√£o.
# Listagem de op√ß√µes obrigat√≥rias e opcionais em um formul√°rio.


# 2. Como usar o checkbox?
# Aqui est√° um exemplo b√°sico onde o usu√°rio escolhe suas linguagens favoritas:

# Importa a fun√ß√£o `prompt` da biblioteca InquirerPy, que permite criar perguntas interativas no terminal
from InquirerPy import prompt

# Define uma lista contendo um dicion√°rio que representa uma pergunta interativa
pergunta = [
    {
        "type": "checkbox",  # Define o tipo da pergunta como checkbox (m√∫ltipla escolha)
        "name": "linguagens",  # Nome da vari√°vel onde as respostas selecionadas ser√£o armazenadas
        "message": "Quais linguagens de programa√ß√£o voc√™ conhece?",  # Pergunta que ser√° exibida no terminal
        "choices": [  # Lista de op√ß√µes que o usu√°rio pode selecionar
            "Python",     # Primeira op√ß√£o dispon√≠vel
            "JavaScript", # Segunda op√ß√£o dispon√≠vel
            "Java",       # Terceira op√ß√£o dispon√≠vel
            "C++",        # Quarta op√ß√£o dispon√≠vel
            "Go",         # Quinta op√ß√£o dispon√≠vel
            "Ruby",       # Sexta op√ß√£o dispon√≠vel
        ],
    }
]

# Exibe a pergunta no terminal e armazena a resposta do usu√°rio na vari√°vel `resposta`
resposta = prompt(pergunta)

# Exibe no terminal a lista de linguagens que o usu√°rio escolheu
print(f"Linguagens escolhidas: {resposta['linguagens']}")


# 3. Adicionando Valores Padr√£o, Use enabled nas escolhas
# Podemos definir explicitamente as op√ß√µes como marcadas usando a chave "enabled" nas escolhas:

# Importa a fun√ß√£o `prompt` da biblioteca InquirerPy, que permite criar interfaces interativas no terminal
from InquirerPy import prompt

# Define uma lista contendo um dicion√°rio que representa uma pergunta para o usu√°rio
pergunta = [
    {
        "type": "checkbox",  # Define o tipo de entrada como uma lista de sele√ß√£o m√∫ltipla (checkbox)
        "name": "ferramentas",  # Nome da vari√°vel que armazenar√° a resposta
        "message": "Quais ferramentas voc√™ usa?",  # Mensagem exibida para o usu√°rio
        "choices": [  # Lista de op√ß√µes dispon√≠veis para sele√ß√£o
            {"name": "Docker", "value": "docker", "enabled": True},  # Op√ß√£o pr√©-selecionada (enabled=True)
            {"name": "Git", "value": "git", "enabled": True},  # Outra op√ß√£o pr√©-selecionada
            {"name": "Kubernetes", "value": "kubernetes"},  # Op√ß√£o dispon√≠vel, mas n√£o pr√©-selecionada
            {"name": "Jenkins", "value": "jenkins"},  # Outra op√ß√£o dispon√≠vel sem pr√©-sele√ß√£o
        ],
    }
]

# Exibe a pergunta ao usu√°rio e armazena a resposta em um dicion√°rio chamado `resposta`
resposta = prompt(pergunta)

# Exibe a resposta do usu√°rio no terminal, mostrando as ferramentas escolhidas
print(f"Ferramentas escolhidas: {resposta['ferramentas']}")


# 4. Criando Grupos com Separator
# Podemos agrupar op√ß√µes separando-as com Separator:

from InquirerPy import prompt  # Importa a fun√ß√£o 'prompt' da biblioteca InquirerPy para interagir com o usu√°rio no terminal
from InquirerPy.separator import Separator  # Importa a classe 'Separator' para criar divisores visuais nas op√ß√µes

# Define a pergunta que ser√° exibida ao usu√°rio
pergunta = [
    {
        "type": "checkbox",  # Tipo de entrada: lista de sele√ß√£o m√∫ltipla (checkbox)
        "name": "tecnologias",  # Nome da resposta, usado como chave para armazenar os dados
        "message": "Escolha suas tecnologias favoritas:",  # Mensagem que ser√° exibida para o usu√°rio
        "choices": [  # Lista de op√ß√µes dispon√≠veis para escolha
            Separator("-- Linguagens --"),  # Adiciona um separador com o t√≠tulo "Linguagens"
            {"name": "Python", "value": "python"},  # Op√ß√£o para Python
            {"name": "JavaScript", "value": "javascript"},  # Op√ß√£o para JavaScript
            {"name": "C++", "value": "c++"},  # Op√ß√£o para C++
            Separator("-- Bancos de Dados --"),  # Adiciona um separador com o t√≠tulo "Bancos de Dados"
            {"name": "PostgreSQL", "value": "postgresql"},  # Op√ß√£o para PostgreSQL
            {"name": "MongoDB", "value": "mongodb"},  # Op√ß√£o para MongoDB
            {"name": "MySQL", "value": "mysql"},  # Op√ß√£o para MySQL
        ],
    }
]

resposta = prompt(pergunta)  # Exibe a pergunta ao usu√°rio e armazena a resposta na vari√°vel 'resposta'
print(f"Tecnologias escolhidas: {resposta['tecnologias']}")  # Exibe a lista de tecnologias escolhidas pelo usu√°rio

# 5. Exemplo Completo: Personalizando um Pedido de Pizza

from InquirerPy import prompt  # Biblioteca para criar perguntas interativas no terminal
from InquirerPy.validator import EmptyInputValidator  # Validador para impedir respostas vazias
from InquirerPy.separator import Separator  # Permite adicionar separadores visuais nas listas de op√ß√µes

# Dicion√°rio contendo os pre√ßos de cada tamanho de pizza
PRECOS_TAMANHO = {
    "pequena": 25.00,  # Pre√ßo da pizza pequena
    "media": 35.00,  # Pre√ßo da pizza m√©dia
    "grande": 45.00,  # Pre√ßo da pizza grande
}

# Dicion√°rio contendo os pre√ßos para cada tipo de massa
PRECOS_MASSA = {
    "fina": 0.00,  # Massa fina n√£o tem custo adicional
    "grossa": 5.00,  # Massa grossa custa R$ 5,00 a mais
    "integral": 7.00,  # Massa integral custa R$ 7,00 a mais
}

def escolher_pizza():
    """Fun√ß√£o que permite ao usu√°rio escolher o tamanho, tipo de massa e ingredientes da pizza."""
    while True:
        # Pergunta ao usu√°rio qual tamanho de pizza ele deseja
        pergunta_tamanho = [
            {
                "type": "list",  # Tipo de pergunta: lista de op√ß√µes
                "name": "tamanho",  # Nome da resposta que ser√° armazenada
                "message": "Escolha o tamanho da sua pizza:",  # Mensagem exibida ao usu√°rio
                "choices": [  # Lista de op√ß√µes dispon√≠veis
                    {"name": f"Pequena üçï - R$ {PRECOS_TAMANHO['pequena']:.2f}", "value": "pequena"},
                    {"name": f"M√©dia üçïüçï - R$ {PRECOS_TAMANHO['media']:.2f}", "value": "media"},
                    {"name": f"Grande üçïüçïüçï - R$ {PRECOS_TAMANHO['grande']:.2f}", "value": "grande"},
                ],
                "default": "media",  # Op√ß√£o pr√©-selecionada
            }
        ]

        # Pergunta sobre o tipo de massa
        pergunta_massa = [
            {
                "type": "list",  # Tipo de pergunta: lista de op√ß√µes
                "name": "massa",  # Nome da resposta armazenada
                "message": "Escolha o tipo de massa:",  # Mensagem exibida ao usu√°rio
                "choices": [
                    {"name": f"Fina üçï - R$ {PRECOS_MASSA['fina']:.2f}", "value": "fina"},
                    {"name": f"Grossa üçï - R$ {PRECOS_MASSA['grossa']:.2f}", "value": "grossa"},
                    {"name": f"Integral üçï - R$ {PRECOS_MASSA['integral']:.2f}", "value": "integral"},
                ],
                "default": "fina",  # Op√ß√£o pr√©-selecionada
            }
        ]

        # Pergunta sobre os ingredientes da pizza
        pergunta_ingredientes = [
            {
                "type": "checkbox",  # Tipo de pergunta: m√∫ltipla escolha
                "name": "ingredientes",  # Nome da resposta armazenada
                "message": "Escolha os ingredientes da sua pizza:",  # Mensagem exibida ao usu√°rio
                "choices": [
                    {"name": "Queijo extra üßÄ", "value": "queijo", "enabled": True},  # Habilitado por padr√£o
                    {"name": "Pepperoni üçñ", "value": "pepperoni"},
                    {"name": "Champignon üçÑ", "value": "champignon"},
                    {"name": "Cebola üßÖ", "value": "cebola"},
                    {"name": "Azeitona ü´í", "value": "azeitona"},
                    Separator(),  # Adiciona um separador visual
                    {"name": "Nenhum ingrediente", "value": "nenhum"},
                ],
            }
        ]

        # Captura as respostas do usu√°rio
        resposta_tamanho = prompt(pergunta_tamanho)
        resposta_massa = prompt(pergunta_massa)
        resposta_ingredientes = prompt(pergunta_ingredientes)

        # Se nenhum ingrediente for selecionado, exibe um erro e reinicia a sele√ß√£o
        if not resposta_ingredientes["ingredientes"]:
            print("Erro: Selecione pelo menos um ingrediente!")
            continue

        # Se o usu√°rio escolher "Nenhum ingrediente", limpa a lista de ingredientes
        if "nenhum" in resposta_ingredientes["ingredientes"]:
            print("Voc√™ escolheu uma pizza sem ingredientes. üçï")
            ingredientes = []
        else:
            ingredientes = resposta_ingredientes["ingredientes"]

        # Calcula o pre√ßo final da pizza
        preco_pizza = PRECOS_TAMANHO[resposta_tamanho["tamanho"]] + PRECOS_MASSA[resposta_massa["massa"]]

        return {
            "tamanho": resposta_tamanho["tamanho"],
            "massa": resposta_massa["massa"],
            "ingredientes": ingredientes,
            "preco": preco_pizza,
        }

def main():
    pedidos = []  # Lista para armazenar os pedidos de pizza
    total_pedido = 0.00  # Inicializa o total do pedido

    while True:
        print(f"\nPedido atual: {len(pedidos)} pizza(s) no carrinho.")
        print(f"Total acumulado: R$ {total_pedido:.2f}\n")

        # Pergunta se o usu√°rio deseja adicionar mais uma pizza
        pergunta_nova_pizza = [
            {
                "type": "confirm",  # Tipo de pergunta: confirma√ß√£o (Sim/N√£o)
                "name": "adicionar",
                "message": "Deseja adicionar uma pizza ao pedido?",
                "default": True,  # Op√ß√£o padr√£o: Sim
            }
        ]
        resposta_nova_pizza = prompt(pergunta_nova_pizza)

        # Se o usu√°rio n√£o quiser mais pizzas, finaliza o pedido
        if not resposta_nova_pizza["adicionar"]:
            break

        # Adiciona uma nova pizza ao pedido
        pizza = escolher_pizza()
        pedidos.append(pizza)
        total_pedido += pizza["preco"]

    # Exibe o resumo final do pedido
    print("\nResumo do seu pedido:")
    for i, pizza in enumerate(pedidos, start=1):
        print(f"\nPizza {i}:")
        print(f"- Tamanho: {pizza['tamanho'].capitalize()}")
        print(f"- Massa: {pizza['massa'].capitalize()}")
        print(f"- Ingredientes: {', '.join(pizza['ingredientes']) if pizza['ingredientes'] else 'Nenhum'}")
        print(f"- Pre√ßo: R$ {pizza['preco']:.2f}")

    print(f"\nTotal do pedido: R$ {total_pedido:.2f}")
    print("Obrigado pelo seu pedido! Sua pizza est√° sendo preparada. üçïüî•")

if __name__ == "__main__":
    main()

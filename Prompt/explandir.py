# 1. O que √© o expand?
# O expand √© um tipo de prompt interativo que:
# ‚úÖ Permite ao usu√°rio escolher uma op√ß√£o pressionando apenas uma tecla.
# ‚úÖ Exibe um menu com uma letra associada a cada op√ß√£o.
# ‚úÖ Ideal para menus r√°pidos e acess√≠veis sem necessidade de setas (‚Üë e ‚Üì).

# üìå Diferen√ßa entre expand e rawlist?

# No rawlist, o usu√°rio digita um n√∫mero.
# No expand, o usu√°rio pressiona uma √∫nica letra associada √† op√ß√£o.

# 2. Como usar o expand?
# Aqui est√° um exemplo b√°sico de um menu para confirmar uma a√ß√£o:

# Importa a fun√ß√£o prompt da biblioteca InquirerPy, que permite criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define uma lista chamada 'pergunta', que cont√©m um dicion√°rio com os detalhes da pergunta interativa.
pergunta = [
    {
        "type": "expand",  # Define o tipo da pergunta como "expand", que permite respostas curtas com atalhos de teclado.
        "name": "confirmacao",  # Nome da vari√°vel onde ser√° armazenada a escolha do usu√°rio.
        "message": "Deseja continuar?",  # Mensagem que ser√° exibida no terminal para o usu√°rio.
        "choices": [  # Lista de op√ß√µes que o usu√°rio pode escolher.
            {"key": "s", "name": "Sim", "value": "sim"},  # Op√ß√£o 'Sim', pode ser escolhida pressionando 's'.
            {"key": "n", "name": "N√£o", "value": "nao"},  # Op√ß√£o 'N√£o', pode ser escolhida pressionando 'n'.
            {"key": "m", "name": "Mais informa√ß√µes", "value": "info"},  # Op√ß√£o 'Mais informa√ß√µes', pode ser escolhida pressionando 'm'.
        ],
    }
]

# Exibe a pergunta no terminal e armazena a resposta escolhida pelo usu√°rio na vari√°vel 'resposta'.
resposta = prompt(pergunta)

# Exibe no terminal a op√ß√£o que o usu√°rio escolheu.
print(f"Voc√™ escolheu: {resposta['confirmacao']}")


# 3. Adicionando uma Op√ß√£o Padr√£o (default)
# Podemos definir uma op√ß√£o padr√£o, que ser√° usada se o usu√°rio apenas pressionar Enter:

# Importa a fun√ß√£o prompt da biblioteca InquirerPy, que permite criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define uma lista chamada 'pergunta', que cont√©m um dicion√°rio com os detalhes da pergunta interativa.
pergunta = [
    {
        "type": "expand",  # Define o tipo da pergunta como "expand", permitindo atalhos de teclado para escolher op√ß√µes.
        "name": "modo",  # Nome da vari√°vel que armazenar√° a resposta do usu√°rio.
        "message": "Escolha o modo de opera√ß√£o:",  # Mensagem que ser√° exibida ao usu√°rio no terminal.
        "choices": [  # Lista de op√ß√µes dispon√≠veis para o usu√°rio escolher.
            {"key": "a", "name": "Autom√°tico", "value": "auto"},  # Se o usu√°rio pressionar 'a', escolher√° "Autom√°tico".
            {"key": "m", "name": "Manual", "value": "manual"},  # Se pressionar 'm', escolher√° "Manual".
            {"key": "c", "name": "Cancelar", "value": "cancelar"},  # Se pressionar 'c', escolher√° "Cancelar".
        ],
        "default": "manual",  # Define "Manual" como a op√ß√£o padr√£o se o usu√°rio apenas pressionar "Enter".
    }
]

# Exibe a pergunta no terminal e armazena a resposta escolhida pelo usu√°rio na vari√°vel 'resposta'.
resposta = prompt(pergunta)

# Exibe no terminal a op√ß√£o que o usu√°rio selecionou.
print(f"Modo selecionado: {resposta['modo']}")


# 4. Exemplo: Configura√ß√£o de Prefer√™ncias
# Vamos criar um menu para selecionar o tema do sistema:

# Importa a fun√ß√£o prompt da biblioteca InquirerPy, que permite criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define uma lista chamada 'pergunta', que cont√©m um dicion√°rio com os detalhes da pergunta interativa.
pergunta = [
    {
        "type": "expand",  # Define o tipo da pergunta como "expand", permitindo atalhos de teclado para escolher op√ß√µes.
        "name": "tema",  # Nome da vari√°vel que armazenar√° a resposta do usu√°rio.
        "message": "Escolha um tema:",  # Pergunta exibida ao usu√°rio no terminal.
        "choices": [  # Lista de op√ß√µes dispon√≠veis para o usu√°rio escolher.
            {"key": "c", "name": "Claro", "value": "claro"},  # Pressionar 'c' seleciona o tema Claro.
            {"key": "e", "name": "Escuro", "value": "escuro"},  # Pressionar 'e' seleciona o tema Escuro.
            {"key": "s", "name": "Sistema", "value": "sistema"},  # Pressionar 's' seleciona o tema do Sistema.
        ],
        "default": "sistema",  # Se o usu√°rio pressionar "Enter" sem escolher, o tema padr√£o ser√° "Sistema".
    }
]

# Exibe a pergunta no terminal e armazena a resposta escolhida pelo usu√°rio na vari√°vel 'resposta'.
resposta = prompt(pergunta)

# Exibe no terminal a op√ß√£o que o usu√°rio selecionou.
print(f"Tema escolhido: {resposta['tema']}")



# 5. Compara√ß√£o expand vs select vs rawlist
# Caracter√≠stica	        expand	                                   select	                               rawlist
# Navega√ß√£o	        Digita√ß√£o de uma letra	                        Setas (‚Üë e ‚Üì)	                    Digita√ß√£o de um n√∫mero
# Usabilidade	        R√°pido e eficiente	                        Mais intuitivo	                    Mais r√°pido para usu√°rios experientes
# Ideal para	        Menus curtos e r√°pidos	                    Listas longas e detalhadas	        Menus simples sem navega√ß√£o por setas
# Padr√£o (default)	Sim, tecla pressionada ou Enter	Sim,            seta pr√©-selecionada	            Sim, n√∫mero pr√©-selecionado

# 6. Exemplo Completo: Escolha de A√ß√£o em um Sistema

# Importa a fun√ß√£o prompt da biblioteca InquirerPy, que permite criar perguntas interativas no terminal.
from InquirerPy import prompt

# Define a fun√ß√£o principal do programa.
def main():
    lista = []  # Cria uma lista vazia para armazenar os itens adicionados pelo usu√°rio.

    # Inicia um loop infinito para manter o programa em execu√ß√£o at√© o usu√°rio decidir sair.
    while True:
        # Define a pergunta para o usu√°rio escolher uma a√ß√£o.
        pergunta = [
            {
                "type": "expand",  # Tipo da pergunta, permitindo atalhos no teclado.
                "name": "acao",  # Nome da vari√°vel que armazenar√° a escolha do usu√°rio.
                "message": "O que deseja fazer?",  # Mensagem exibida ao usu√°rio.
                "choices": [  # Lista de op√ß√µes dispon√≠veis para o usu√°rio.
                    {"key": "a", "name": "Adicionar novo item", "value": "adicionar"},  # Pressionar 'a' para adicionar um item.
                    {"key": "r", "name": "Remover item", "value": "remover"},  # Pressionar 'r' para remover um item.
                    {"key": "v", "name": "Visualizar lista", "value": "visualizar"},  # Pressionar 'v' para visualizar os itens.
                    {"key": "s", "name": "Sair", "value": "sair"},  # Pressionar 's' para sair do programa.
                ],
                "default": "visualizar",  # Se o usu√°rio pressionar "Enter", a op√ß√£o padr√£o ser√° visualizar a lista.
            }
        ]

        # Exibe a pergunta e armazena a resposta na vari√°vel 'resposta'.
        resposta = prompt(pergunta)
        acao = resposta["acao"]  # Obt√©m a escolha do usu√°rio.

        # Se o usu√°rio escolher "adicionar":
        if acao == "adicionar":
            # Pergunta ao usu√°rio o nome do item a ser adicionado.
            novo_item = prompt({"type": "input", "name": "item", "message": "Digite o nome do item:"})["item"]
            if novo_item:  # Verifica se o usu√°rio digitou algo.
                lista.append(novo_item)  # Adiciona o item √† lista.
                print(f"Item '{novo_item}' adicionado! ‚úÖ")  # Confirma a adi√ß√£o do item.
            else:
                print("Nenhum item adicionado. ‚ùå")  # Se o usu√°rio n√£o digitou nada, exibe uma mensagem.

        # Se o usu√°rio escolher "remover":
        elif acao == "remover":
            if lista:  # Verifica se a lista n√£o est√° vazia.
                # Pergunta qual item o usu√°rio deseja remover, listando os itens dispon√≠veis.
                escolha = prompt({
                    "type": "list",
                    "name": "item_remover",
                    "message": "Selecione o item para remover:",
                    "choices": lista,  # Mostra os itens atuais na lista como op√ß√µes.
                })
                lista.remove(escolha["item_remover"])  # Remove o item selecionado da lista.
                print(f"Item '{escolha['item_remover']}' removido! üóëÔ∏è")  # Confirma a remo√ß√£o do item.
            else:
                print("A lista est√° vazia! ‚ùå")  # Se n√£o houver itens, exibe uma mensagem de erro.

        # Se o usu√°rio escolher "visualizar":
        elif acao == "visualizar":
            if lista:  # Verifica se h√° itens na lista.
                print("\nLista de itens:")
                for idx, item in enumerate(lista, 1):  # Percorre a lista e exibe os itens numerados.
                    print(f"{idx}. {item}")
            else:
                print("A lista est√° vazia! ‚ùå")  # Se n√£o houver itens, exibe uma mensagem.

        # Se o usu√°rio escolher "sair":
        elif acao == "sair":
            print("Saindo do sistema. ‚ùå")  # Exibe uma mensagem de despedida.
            break  # Sai do loop e finaliza o programa.

        # Exibe uma linha separadora para melhorar a visualiza√ß√£o no terminal.
        print("\n" + "-" * 30 + "\n")

# Verifica se o script est√° sendo executado diretamente (e n√£o importado como m√≥dulo).
if __name__ == "__main__":
    main()  # Chama a fun√ß√£o principal para iniciar o programa.
